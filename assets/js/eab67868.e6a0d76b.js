"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[73555],{9859:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"2.7","label":"2.7","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-2.7","isLast":false,"docsSidebars":{"version-2.7/docs":[{"type":"category","label":"Overview","items":[{"type":"link","label":"Installation & Usage","href":"/docs/2.7/installation","docId":"installation"},{"type":"link","label":"Defining entities","href":"/docs/2.7/defining-entities","docId":"defining-entities"},{"type":"link","label":"Entity Manager","href":"/docs/2.7/entity-manager","docId":"entity-manager"},{"type":"link","label":"Entity Repository","href":"/docs/2.7/repositories","docId":"repositories"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Fundamentals","items":[{"type":"link","label":"Identity Map and Request Context","href":"/docs/2.7/identity-map","docId":"identity-map"},{"type":"link","label":"Entity References","href":"/docs/2.7/entity-references","docId":"entity-references"},{"type":"link","label":"Using entity constructors","href":"/docs/2.7/entity-constructors","docId":"entity-constructors"},{"type":"link","label":"Collections","href":"/docs/2.7/collections","docId":"collections"},{"type":"link","label":"Unit of Work","href":"/docs/2.7/unit-of-work","docId":"unit-of-work"},{"type":"link","label":"Transactions and concurrency","href":"/docs/2.7/transactions","docId":"transactions"},{"type":"link","label":"Cascading","href":"/docs/2.7/cascading","docId":"cascading"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Advanced Features","items":[{"type":"link","label":"Smart Nested Populate","href":"/docs/2.7/nested-populate","docId":"nested-populate"},{"type":"link","label":"Smart query conditions","href":"/docs/2.7/query-conditions","docId":"query-conditions"},{"type":"link","label":"Using QueryBuilder","href":"/docs/2.7/query-builder","docId":"query-builder"},{"type":"link","label":"Serializing","href":"/docs/2.7/serializing","docId":"serializing"},{"type":"link","label":"Updating Entity Values","href":"/docs/2.7/entity-helper","docId":"entity-helper"},{"type":"link","label":"Property validation","href":"/docs/2.7/property-validation","docId":"property-validation"},{"type":"link","label":"Lifecycle hooks","href":"/docs/2.7/lifecycle-hooks","docId":"lifecycle-hooks"},{"type":"link","label":"Naming strategy","href":"/docs/2.7/naming-strategy","docId":"naming-strategy"},{"type":"link","label":"Metadata cache","href":"/docs/2.7/metadata-cache","docId":"metadata-cache"},{"type":"link","label":"Debugging","href":"/docs/2.7/debugging","docId":"debugging"},{"type":"link","label":"Schema generator","href":"/docs/2.7/schema-generator","docId":"schema-generator"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Usage with Different Drivers","items":[{"type":"link","label":"Usage with SQL Drivers","href":"/docs/2.7/usage-with-sql","docId":"usage-with-sql"},{"type":"link","label":"Usage with MongoDB","href":"/docs/2.7/usage-with-mongo","docId":"usage-with-mongo"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Recipes","items":[{"type":"link","label":"Usage with NestJS","href":"/docs/2.7/usage-with-nestjs","docId":"usage-with-nestjs"},{"type":"link","label":"Usage with Vanilla JS","href":"/docs/2.7/usage-with-js","docId":"usage-with-js"},{"type":"link","label":"Creating Custom Driver","href":"/docs/2.7/custom-driver","docId":"custom-driver"}],"collapsed":true,"collapsible":true}]},"docs":{"cascading":{"id":"cascading","title":"Cascading persist, merge and remove","description":"When persisting or removing entity, all your references are by default cascade persisted.","sidebar":"version-2.7/docs"},"collections":{"id":"collections","title":"Collections","description":"OneToMany and ManyToMany collections are stored in a Collection wrapper. It implements","sidebar":"version-2.7/docs"},"custom-driver":{"id":"custom-driver","title":"Creating Custom Driver","description":"If you want to use database that is not currently supported, you can implement your own driver.","sidebar":"version-2.7/docs"},"debugging":{"id":"debugging","title":"Debugging","description":"For development purposes it might come handy to enable logging and debug mode:","sidebar":"version-2.7/docs"},"defining-entities":{"id":"defining-entities","title":"Defining entities","description":"Entities are simple javascript objects (so called POJO), decorated with @Entity decorator.","sidebar":"version-2.7/docs"},"entity-constructors":{"id":"entity-constructors","title":"Using entity constructors","description":"Internally, MikroORM never calls entity constructor, so you are free to use it as you wish.","sidebar":"version-2.7/docs"},"entity-helper":{"id":"entity-helper","title":"EntityHelper and Decorated Entities","description":"Updating entity values with IEntity.assign()","sidebar":"version-2.7/docs"},"entity-manager":{"id":"entity-manager","title":"Working with Entity Manager","description":"Persist and flush","sidebar":"version-2.7/docs"},"entity-references":{"id":"entity-references","title":"Entity References","description":"Every single entity relation is mapped to an entity reference. Reference is an entity that has","sidebar":"version-2.7/docs"},"identity-map":{"id":"identity-map","title":"Identity Map and Request Context","description":"MikroORM uses identity map in background so you will always get the same instance of","sidebar":"version-2.7/docs"},"index":{"id":"index","title":"MikroORM v2.7","description":"NPM version"},"installation":{"id":"installation","title":"Installation & Usage","description":"First install the module via yarn or npm and do not forget to install the database driver as well:","sidebar":"version-2.7/docs"},"lifecycle-hooks":{"id":"lifecycle-hooks","title":"Lifecycle hooks","description":"You can use lifecycle hooks to run some code when entity gets persisted. You can mark any of","sidebar":"version-2.7/docs"},"metadata-cache":{"id":"metadata-cache","title":"Metadata cache","description":"Under the hood, MikroORM uses ts-morph to read","sidebar":"version-2.7/docs"},"naming-strategy":{"id":"naming-strategy","title":"Naming strategy","description":"When mapping your entities to database tables and columns, their names will be defined by naming","sidebar":"version-2.7/docs"},"nested-populate":{"id":"nested-populate","title":"Smart Nested Populate","description":"MikroORM is capable of loading large nested structures while maintaining good","sidebar":"version-2.7/docs"},"property-validation":{"id":"property-validation","title":"Property validation","description":"MikroORM will validate your properties before actual persisting happens. It will try to fix wrong","sidebar":"version-2.7/docs"},"query-builder":{"id":"query-builder","title":"Using QueryBuilder","description":"When you need to execute some SQL query without all the ORM stuff involved, you can either","sidebar":"version-2.7/docs"},"query-conditions":{"id":"query-conditions","title":"Smart query conditions","description":"When you want to make complex queries, you can easily end up with a lot of boilerplate code","sidebar":"version-2.7/docs"},"repositories":{"id":"repositories","title":"Using EntityRepository instead of EntityManager","description":"More convenient way of fetching entities from database is by using EntityRepository, that","sidebar":"version-2.7/docs"},"schema-generator":{"id":"schema-generator","title":"Schema generator","description":"To generate schema from your entity metadata, you can use SchemaGenerator","sidebar":"version-2.7/docs"},"serializing":{"id":"serializing","title":"Serializing","description":"By default, all entities are monkey patched with toObject() and toJSON methods:","sidebar":"version-2.7/docs"},"transactions":{"id":"transactions","title":"Transactions and concurrency","description":"Transaction demarcation","sidebar":"version-2.7/docs"},"unit-of-work":{"id":"unit-of-work","title":"Unit of Work and transactions","description":"MikroORM uses the Identity Map pattern to track objects. Whenever you fetch an object from","sidebar":"version-2.7/docs"},"usage-with-js":{"id":"usage-with-js","title":"Usage with JavaScript","description":"To use mikro-orm with Vanilla JavaScript, define your entities like this:","sidebar":"version-2.7/docs"},"usage-with-mongo":{"id":"usage-with-mongo","title":"Usage with MongoDB","description":"To use mikro-orm with mongo database, do not forget to install mongodb dependency. As MongoDriver","sidebar":"version-2.7/docs"},"usage-with-nestjs":{"id":"usage-with-nestjs","title":"Using MikroORM with NestJS framework","description":"Installation","sidebar":"version-2.7/docs"},"usage-with-sql":{"id":"usage-with-sql","title":"Usage with MySQL, MariaDB, PostgreSQL or SQLite","description":"To use mikro-orm with MySQL database, do not forget to install mysql2 dependency and set","sidebar":"version-2.7/docs"}}}')}}]);